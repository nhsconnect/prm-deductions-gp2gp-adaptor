Index: src/config/index.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/config/index.js	(revision 8f99722255bf8841350d19a21cf4e54f82df919b)
+++ src/config/index.js	(revision f88d81c7bc7f9b7b0de321485499520fc4cd72d7)
@@ -1,7 +1,7 @@
 const portNumber = 3000;
 
 const initialiseConfig = () => ({
-  deductionsAsid: process.env.DEDUCTIONS_ASID || '200000001161',
+  deductionsAsid: process.env.DEDUCTIONS_ASID || '918999199177',
   deductionsOdsCode: process.env.DEDUCTIONS_ODS_CODE || 'B86041',
   queueName: process.env.MHS_QUEUE_NAME,
   unhandledMessagesQueueName: 'unhandled-raw-inbound',
Index: src/services/ehr/fetch-ehr-repo-storage-url.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/services/ehr/fetch-ehr-repo-storage-url.js	(revision 8f99722255bf8841350d19a21cf4e54f82df919b)
+++ src/services/ehr/fetch-ehr-repo-storage-url.js	(revision f88d81c7bc7f9b7b0de321485499520fc4cd72d7)
@@ -4,7 +4,9 @@
 
 export const fetchStorageUrl = async body => {
   try {
-    return await axios.post(`${config.ehrRepoUrl}/fragments`, body);
+    return await axios.post(`${config.ehrRepoUrl}/fragments`, body, {
+      headers: { Authorization: process.env.AUTHORIZATION_KEYS }
+    });
   } catch (err) {
     updateLogEvent({ status: 'failed to get pre-signed url', error: err.stack });
     throw err;
Index: src/services/ehr/put-message-in-ehr-repo.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/services/ehr/put-message-in-ehr-repo.js	(revision 8f99722255bf8841350d19a21cf4e54f82df919b)
+++ src/services/ehr/put-message-in-ehr-repo.js	(revision f88d81c7bc7f9b7b0de321485499520fc4cd72d7)
@@ -3,7 +3,11 @@
 
 export const putMessageInEhrRepo = async (url, message) => {
   try {
-    const response = await axios.put(url, message);
+    const response = await axios.put(url, message, {
+      headers: {
+        'Content-Type': 'text/plain'
+      }
+    });
     updateLogEvent({
       ehrRepository: { responseCode: response.status, responseMessage: response.statusText }
     });
Index: src/services/ehr/set-ehr-repo-transfer-complete.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/services/ehr/set-ehr-repo-transfer-complete.js	(revision 8f99722255bf8841350d19a21cf4e54f82df919b)
+++ src/services/ehr/set-ehr-repo-transfer-complete.js	(revision f88d81c7bc7f9b7b0de321485499520fc4cd72d7)
@@ -4,10 +4,14 @@
 
 export const setTransferComplete = async body => {
   try {
-    const response = await axios.patch(`${config.ehrRepoUrl}/fragments`, {
-      body,
-      transferComplete: true
-    });
+    const response = await axios.patch(
+      `${config.ehrRepoUrl}/fragments`,
+      {
+        body,
+        transferComplete: true
+      },
+      { headers: { Authorization: process.env.AUTHORIZATION_KEYS } }
+    );
     updateLogEvent({ ehrRepository: { transferSuccessful: true } });
     return response;
   } catch (err) {
Index: src/services/mhs/mhs-outbound-client.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/services/mhs/mhs-outbound-client.js	(revision 8f99722255bf8841350d19a21cf4e54f82df919b)
+++ src/services/mhs/mhs-outbound-client.js	(revision f88d81c7bc7f9b7b0de321485499520fc4cd72d7)
@@ -36,6 +36,7 @@
         'Sync-Async': false,
         'Correlation-Id': conversationId,
         'Ods-Code': odsCode,
+        'wait-for-response': false,
         'from-asid': config.deductionsAsid
       }
     };
Index: src/services/parser/multipart-parser.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/services/parser/multipart-parser.js	(revision 8f99722255bf8841350d19a21cf4e54f82df919b)
+++ src/services/parser/multipart-parser.js	(revision f88d81c7bc7f9b7b0de321485499520fc4cd72d7)
@@ -48,9 +48,18 @@
 };
 
 const parseMultipartBody = multipartMessage =>
-  extractBoundaryContent(multipartMessage).map(messagePart => ({
-    headers: extractHeaders(messagePart),
-    body: extractBody(messagePart)
-  }));
+{
+  let jsonMsg = JSON.parse("{" + multipartMessage.split("{").slice(1).join("{"));
+  return [
+    {
+      headers: [],
+      body: jsonMsg.ebXML
+    },
+    {
+      headers: [],
+      body: jsonMsg.payload
+    }
+  ];
+};
 
 export { parseMultipartBody };
Index: src/services/parser/soap/extract-manifest-message-id.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/services/parser/soap/extract-manifest-message-id.js	(revision 8f99722255bf8841350d19a21cf4e54f82df919b)
+++ src/services/parser/soap/extract-manifest-message-id.js	(revision f88d81c7bc7f9b7b0de321485499520fc4cd72d7)
@@ -11,9 +11,9 @@
     if (extractedId) {
       acc.push(extractedId[1]);
     } else {
-      updateLogEventWithError(
-        `Unable to extract manifest message Id from ${manifestInfo.map(item => item.href)}`
-      );
+      updateLogEventWithError({
+        message: `Unable to extract manifest message Id from ${manifestInfo.map(item => item.href)}`
+      });
     }
     return acc;
   }, []);
